package shodan

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

/*
Shodan searches for exploits using the following databases:
Exploit DB
Metasploit
CVE
*/

// Exploit struct receives the following elements from the API call
type Exploit struct {
	Code        string `json:"code,omitempty"`
	Description string `json:"description"`
	Author      string `json:"author,omitempty"`
	//ID          int64         `json:"_id"`
	Source   string        `json:"source"`
	Platform string        `json:"platform,omitempty"`
	Date     time.Time     `json:"date,omitempty"`
	Cve      []string      `json:"cve"`
	Type     string        `json:"type,omitempty"`
	Port     int           `json:"port,omitempty"`
	Osvdb    []interface{} `json:"osvdb,omitempty"`
	Bid      []int         `json:"bid,omitempty"`
	Msb      []interface{} `json:"msb,omitempty"`
}

// ExploitSearch parses the elements in Matches
type ExploitSearch struct {
	Matches []Exploit `json:"matches"`
}

// ExploitSearch method
func (s *Client) ExploitSearch(q string) (*ExploitSearch, error) {
	res, err := http.Get(fmt.Sprintf(ExploitURL+"/api/search?query=%s&key=%s", q, s.apiKey))
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()

	var ret ExploitSearch
	if err := json.NewDecoder(res.Body).Decode(&ret); err != nil {
		return nil, err
	}
	return &ret, nil
}
