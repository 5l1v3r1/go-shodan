package exploit

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// Exploit struct receives the following elements from the API call
type Exploit struct {
	Source      string `json: "source"`
	_id         string `json: "_id"`
	Description string `json: "description"`
	Osvdb       []int  `json: "osvdb"`
	Bid         []int  `json: "bid"`
	Cve         string `json: "cve"`
	Msb         []int  `json: "msb"`
}

// ExploitSearch parses the elements in Matches
type ExploitSearch struct {
	Matches []Exploit `json: "matches"`
}

// function to search exploits.shodan using the struct defined above.
func (s *Client) ExploitSearch(q string) (*Exploit, error) {
	res, err := http.Get(fmt.Sprintf("%s/api/search?query=%s&key=%s", ExploitURL, q, s.apiKey))
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()

	var ret ExploitSearch
	if err := json.NewDecoder(res.Body).Decode(&ret); err != nil {
		return nil, err
	}
	return &ret, nil
}
